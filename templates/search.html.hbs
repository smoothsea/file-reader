<html>

<head>
    <meta name=renderer content=webkit>
    <title>搜索</title>
    <style>
        i {
            font-style: normal;
        }

        body {
            font-size: 13px;
        }

        .row {
            color: gray;
            font-size: 12px;
        }
    </style>
</head>

<body>
    <div id="content" style="display: none;">
        {{ content }}
    </div>

    <div style="display: none;" id="search">
        {{ search }}
    </div>
    <script src="/public/zepto.js"></script>
    <script>
        var content = '';
        var search = '';
        var replacements = {
            "--replacement_blod_left--": '<i style="color:red;">',
            "--replacement_blod_right--": '</i>',
        };

        function handleContent(content, caseSensitive) {
            var flag = caseSensitive ? "g" : "gi";
            var reg = new RegExp(search.replaceAll(" ", "&nbsp;"), flag);
            var noReg = /(^(\d+)[-:])/;
            var debugReg = new RegExp('(请求地址:(&nbsp;)*(.*?)(<br>)+.*?json:(&nbsp;)*(.*?)(<br>)+)', "gi");

            var arr = content.split(/[\r\n]/g);
            var aheadMap = [];
            for (var i = 0, len = arr.length; i < len; i++) {
                var isContent = false;
                var match = "";
                if (match = arr[i].match(noReg)) {
                  match = match[2];
                  isContent = true;
                }

                if (match === null) match = "";
                aheadMap.push(match);

                // 去掉行首
                arr[i] = arr[i].replace(noReg, '');

                // 替换空格
                arr[i] = arr[i].replace(/\s/g, "&nbsp;");

                if (isContent && search.trim() !== "") {
                  // 替换关键词
                  arr[i] = arr[i].replace(reg, '<i style="color:red;">' + search + '</i>');
                }
            }
            content = arr.join("<br>");
            content = content.replace(debugReg, function (match, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
                return '<a target="blank" href="/debug?uri=' + encodeURIComponent(stripTags(p3)) + '&json=' + encodeURIComponent(stripTags(p6)) + '">调试 </a>' + p1;
            });

            // 加上行首
            var arr = content.split(/<br>/g);
            for (var i = 0, len = arr.length; i < len; i++) {
              if (aheadMap[i] !== "") {
                arr[i] = '<i class="row">' + aheadMap[i] + '</i>' + "&nbsp;&nbsp;&nbsp;" + arr[i];
              }
            }
            content = arr.join("<br>");

            return content;
        }

        function stripTags(html) {
          return html.replace(/<.*?>/g, "");
        }

        function getQueryVariable(variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) { return pair[1]; }
            }
            return (false);
        }

        (function init() {
            search = $("#search").text().trim();
            content = $("#content").html().trim();

            var caseSensitive = getQueryVariable("case_sensitive");
            content = handleContent(content, caseSensitive);
            $("#content").html(content).show();
        })();

    </script>
</body>

</html>
